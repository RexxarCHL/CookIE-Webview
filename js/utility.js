// Generated by CoffeeScript 1.7.1
var convertTimeToSeconds, findChosenRecipeId, kitchenRecipesAjaxd, parseSecondsToTime, parseTimeToMinutes, resetUtilBtn, utilityDetect, utilityEdit, utilityTrash;

$(document).ready(function() {
  $('body').find('.popup_btn').forEach(function(elem) {
    $(elem).click(function() {
      return utilityDetect(this);
    });
    return void 0;
  });
  return void 0;
});

utilityDetect = function(elem) {
  console.log('Popup #' + elem.id);
  switch (elem.getAttribute('data-function')) {
    case 'edit':
      $('#popup_btn_trash').removeClass('selected');
      $(elem).toggleClass('selected');
      if ($(elem).hasClass('selected')) {
        utilityEdit();
      } else {
        resetUtilBtn();
      }
      break;
    case 'trash':
      $('#popup_btn_edit').removeClass('selected');
      $(elem).toggleClass('selected');
      if ($(elem).hasClass('selected')) {
        utilityTrash();
      } else {
        resetUtilBtn();
      }
      break;
    default:
      break;
  }
  return void 0;
};

resetUtilBtn = function() {
  var utilBtn;
  $('#main_Kitchen_Recipes').find('.selected').removeClass('selected');
  utilBtn = $('#kitchenUtilityBtn');
  utilBtn.removeClass('trash');
  utilBtn.removeClass('edit');
  utilBtn.unbind('click');
  utilBtn.html('Tap on the Cog to begin.');
  return window.mode = 0;
};

utilityEdit = function() {
  var utilBtn;
  console.log('popup edit');
  window.mode = 1;
  utilBtn = $('#kitchenUtilityBtn');
  utilBtn.removeClass('trash');
  utilBtn.addClass('edit');
  utilBtn.html('Start Cooking.');
  utilBtn.click(function() {
    var selectedId;
    selectedId = findChosenRecipeId();
    return $.ui.popup({
      title: '為Menu命名',
      message: '<input type="text"><label>公開</label><input id="toggle2" type="checkbox" name="toggle2" value="1" class="toggle"><label for="toggle2" data-on="私密" data-off="公開"><span></span></label><br>',
      cancelText: "Cancel",
      cancelCallback: function() {
        console.log("cancelled");
        return void 0;
      },
      doneText: "Done",
      doneCallback: function() {
        return console.log("Done for!");
      },
      cancelOnly: false
    });
  });
  return void 0;
};

kitchenRecipesAjaxd = 0;

utilityTrash = function() {
  var utilBtn;
  console.log('popup trash');
  window.mode = 1;
  utilBtn = $('#kitchenUtilityBtn');
  utilBtn.removeClass('edit');
  utilBtn.addClass('trash');
  utilBtn.html('Delete selected recipe.');
  utilBtn.click(function() {
    var ans, data, selectedId;
    selectedId = findChosenRecipeId();
    if (selectedId.length === 0) {
      return void 0;
    }
    ans = confirm("Deleteing recipes from Kitchen. Are you sure?");
    if (ans === false) {
      return void 0;
    }
    data = {
      'type': 'recipe',
      'recipe_id': selectedId
    };
    console.log(data);
    data = JSON.stringify(data);
    console.log(data);
    $.ajax({
      type: 'DELETE',
      url: 'http://54.178.135.71:8080/CookIEServer/favorite',
      dataType: 'application/json',
      data: data,
      timeout: 10000,
      success: function(data) {
        var scope;
        console.log("[SUCCESS] deleting recipes #" + selectedId);
        console.log(data);
        scope = $("#main_Kitchen_Recipes");
        scope.find("#Results").html("");
        scope.find("#infinite").text("Reloading...");
        kitchenRecipesAjaxd = 0;
        getKitchenRecipes(kitchenRecipesAjaxd);
        return void 0;
      },
      error: function(data, status) {
        console.log("[ERROR] deleting recipes #" + selectedId);
        console.log(data);
        return void 0;
      }
    });
    return void 0;
  });
  return void 0;
};

findChosenRecipeId = function() {
  var recipeSelectedId;
  recipeSelectedId = [];
  $('#main_Kitchen_Recipes').find('.chosen').forEach(function(elem) {
    return recipeSelectedId.push(elem.getAttribute('data-recipe-id'));
  });
  console.log(recipeSelectedId);
  return recipeSelectedId;
};

parseTimeToMinutes = function(time) {
  time = time.split(":");
  return time = parseInt(time[0]) * 60 + parseInt(time[1]) + parseInt(time[2]) / 60;
};

convertTimeToSeconds = function(time) {
  time = time.split(":");
  return time = parseInt(time[0]) * 3600 + parseInt(time[1]) * 60 + parseInt(time[2]);
};

parseSecondsToTime = function(seconds) {
  var hour, min;
  hour = Math.floor(seconds / 3600);
  seconds %= 3600;
  hour = hour < 10 ? "0" + hour : hour;
  min = Math.floor(seconds / 60);
  seconds %= 60;
  min = min < 10 ? "0" + min : min;
  seconds = seconds < 10 ? "0" + seconds : seconds;
  return "" + hour + ":" + min + ":" + seconds;
};
